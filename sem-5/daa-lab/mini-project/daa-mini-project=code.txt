•	Chakrabarty, D., & Das, K. (2007) – "Greedy Algorithms for Interval Scheduling"
•	Graham, R.L. (1966) – "An Efficient Algorithm for Interval Scheduling"
•	Kernighan, B. W., & Ritchie, D. M. (1978) – "The C Programming Language"
•	Cormen, T.H., Leiserson, C.E., Rivest, R.L., & Stein, C. (2009) – "Introduction to Algorithms"
•	Dijkstra, E.W. (1970) – "A Case Study in Programming Methodology"



# Greedy Algorithm for Interval Scheduling
def greedy_interval_scheduling(tasks):
    # Sort tasks by their end time
    tasks.sort(key=lambda x: x[1])
    
    selected_tasks = []
    last_end_time = -float('inf')
    
    for task in tasks:
        start, end, _ = task
        if start >= last_end_time:
            selected_tasks.append(task)
            last_end_time = end
    
    return selected_tasks

# Example usage:
tasks = [(1, 4, 0), (2, 6, 0), (5, 8, 0), (7, 9, 0)]
selected = greedy_interval_scheduling(tasks)
print("Greedy selected tasks:", selected)



####################################
how to print the execution time for comapring this with dynamic programming approach



import bisect

# Dynamic Programming for Weighted Interval Scheduling
def dp_interval_scheduling(tasks):
    # Sort tasks by their end time
    tasks.sort(key=lambda x: x[1])
    
    # dp[i] stores the maximum weight we can achieve with tasks[0...i]
    n = len(tasks)
    dp = [0] * n
    
    # Helper function to find the last non-overlapping task using binary search
    def find_last_non_overlap(i):
        low, high = 0, i - 1
        while low <= high:
            mid = (low + high) // 2
            if tasks[mid][1] <= tasks[i][0]:
                if tasks[mid + 1][1] <= tasks[i][0]:
                    low = mid + 1
                else:
                    return mid
            else:
                high = mid - 1
        return -1
    
    # Base case: the first task's weight is its own weight
    dp[0] = tasks[0][2]
    
    # Fill the dp table
    for i in range(1, n):
        # Option 1: Exclude task i
        include_task = tasks[i][2] + (dp[find_last_non_overlap(i)] if find_last_non_overlap(i) != -1 else 0)
        # Option 2: Exclude task i
        exclude_task = dp[i - 1]
        
        # Take the maximum of including or excluding the task
        dp[i] = max(include_task, exclude_task)
    
    # Reconstruct the optimal schedule
    selected_tasks = []
    i = n - 1
    while i >= 0:
        if dp[i] != (dp[i - 1] if i > 0 else 0):
            selected_tasks.append(tasks[i])
            i = find_last_non_overlap(i)
        else:
            i -= 1
    
    return selected_tasks[::-1]

# Example usage with weights
tasks = [(1, 4, 3), (2, 6, 5), (5, 8, 7), (7, 9, 8)]
selected = dp_interval_scheduling(tasks)
print("DP selected tasks:", selected)
